/*
Установка: установить Node.js

Запуск приложения: node server.js

Это HTTP-сервер, который прослушивает протокол HTTP на порту 3003 (lessons 001-005).

Проверка приложения:
Перейти на http://localhost:3003/
Перейти на http://localhost:3003/home
Перейти на http://localhost:3003/about
Перейти на http://localhost:3003/contacts
*/

/*Подключаем модуль для работы с протоколом HTTP. "require()" - это встроенная в Node.js функция, которая позволяет
подключать модули.*/
const http = require('http');
/*Подключаем модуль "fs" для работы с файловой системой.*/
const fs = require('fs');

/*При помощи встроенного в модуль HTTP метода "createServer()" создаем сервер на нашем компьютере.

В качестве параметра указываем callback-функцию, которая будет вызываться при запуске сервера и прослушивать какой-то
указанный порт. Эта callback-функция будет вызываться повторно, когда будут производиться HTTP-запросы на указанный
порт.

Эта callback-функция имеет свои 2 параметра, которые она автоматически будет получать при вызове. Параметр "request"
содержит информацию, касающуюся HTTP-запроса, например URL, по которому был совершен запрос. А параметр "response"
содержит информацию, касающуюся HTTP-ответа, например, у этого параметра есть метод "write()", благодаря которому можно
указывать тело HTTP-ответа.*/
const server = http.createServer(
    (request, response) => {

        /*Сервер делает также еще один запрос на получение иконки, поэтому проверяем происходит ли такой запрос.*/
        if (request.url === '/favicon.ico') {
            /*Если такой запрос происходит, то при помощи встроенного в модуль "fs" метода "createReadStream()",
            позволяющего открыть файл или поток, прочитать присутствующие в нем данные и превратить их в поток для
            чтения, получаем специальный объект на основе изображения для иконки по указанному адресу на компьютере.*/
            let fileStream = fs.createReadStream('./favicon.ico');
            /*Далее при помощи встроенного в модуль "fs" метода "pipe()" переводим полученный поток для чтения в поток
            для записи, чтобы на запрос иконки было передано указанное изображение.*/
            return fileStream.pipe(response);
        }

        /*В зависимости от URL возвращаем разные HTTP-ответы.*/
        switch (request.url) {
            case '/home' :
                response.write('HOME');
                break;

            case '/' :
            case '/about' :
                response.write('ABOUT');
                break;

            default:
                response.write('404');
        }

        /*Метод "end()" - это встроенный метод в параметр "response", который сигнализирует о том, что никакой
        информации в ответ больше не будет записано. Если после этого попытаться вызвать метод "write()", то будет
        ошибка.*/
        response.end();
    }
);

/*Метод "listen()" - это встроенный метод в созданном нами HTTP-сервере. Этот метод запускает HTTP-сервер, который будет
прослушивать HTTP-протокол по указанном порту или пути.*/
server.listen(3003);