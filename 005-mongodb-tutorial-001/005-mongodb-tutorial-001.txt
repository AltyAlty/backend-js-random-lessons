MongoDB - это NoSQL-СУБД, которая использует JSON-подобные документы и схему базы данных.

Запуск БД: ./mongod.exe --dbpath .\data\db
Скачать zip-версию MongoDB и нажать Win+R, чтобы запустить там файл mongod.exe. В Windows PowerShell нужно писать
"./mongod.exe".
По стандарту MongoDB пытается положить свои файлы в "\data\db". Чтобы поменять этот путь можно при запуске программы
использовать "--dbpath .\data\db" (папки должны быть уже созданы).

Запуск СУБД:
Скачать zip-версию MongoDB Shell и нажать Win+R, чтобы запустить там файл mongosh.exe. В Windows PowerShell нужно писать
"./mongosh.exe".
Можно использовать команду "use имя_бд", чтобы использовать разные БД.
Можно использовать команду "db", чтобы узнать текущую БД.
Можно использовать команду "db.getCollection("videos")", чтобы указать куда будем складывать какие-то одинаковые данные
(похоже на массив).
Можно использовать команду "db.getCollection("videos").insertMany([{name: 'js'},{name: 'react'},{name: 'nodejs'}])",
чтобы добавить какие-то одинаковые данные в указанное место.
Можно использовать команду "db.getCollection("videos").find( {} )", чтобы найти какие-то одинаковые данные в указанном
месте.

Запуск Studio 3T - GUI для СУБД MongoDB:
Скачать Studio 3T и установить.
Выбрать "Create a new connection". В "name" указать "localhost" и нажать "Save".
В окне "Connection manager" два раза кликнуть по нашему "localhost" и мы увидим нашу БД.
В контекстном меню нашей БД "youtube" выбрать "Open IntelliShell".

CREATE:

Добавить совсем другой тип данных:
db.getCollection("videos").insertMany([{firstName: 'John', age: 34}])

Добавить один новый документ в коллекцию:
db.inventory.insertOne(
   { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }
)

Добавить несколько новых документов в коллекцию:
db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } },
   { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } },
   { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }
])

READ:

Найти все документы в коллекции:
db.inventory.find({})

Найти документ в коллекции по какому-то признаку:
db.inventory.find( { item: "canvas" } )

Найти документ в коллекции, у которого в значении свойства "item" есть буква "o":
db.inventory.find( { item: { $regex: "o" } } )

Найти документы в коллекции, у которых значение свойства "status" равно либо "A", либо "D":
db.inventory.find( { status: { $in: [ "A", "D" ] } } )

Найти документы в коллекции, у которых значение свойства "status" равно "A", а свойство "qty" имеет значение меньше 30
(AND):
db.inventory.find( { status: "A", qty: { $lt: 30 } } )

Найти документы в коллекции, у которых либо значение свойства "status" равно "A", либо свойство "qty" имеет значение
меньше 30 (OR):
db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )

Найти документы в коллекции, у которых значение свойства "status" равно "A" и либо свойство "qty" имеет значение меньше
30, либо свойство "item" имеет значение начинающееся с "p" (AND+OR):
db.inventory.find( {
     status: "A",
     $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
} )


UPDATE:

Обновить в коллекции документ, у которого значение свойства "item" равно "paper". У этого документа свойство "size.uom"
станет "cm", свойство "status" станет "P", свойство "lastModified" будет иметь значение равное текущей дате,
причем если этого свойства не было, то оно будет добавлено:
db.inventory.updateOne(
   { item: "paper" },
   {
     $set: { "size.uom": "cm", status: "P" },
     $currentDate: { lastModified: true }
   }
)

Обновить в коллекции документы, у которого значение свойства "qty" меньше 50. У этих документов свойство "size.uom"
станет "in", свойство "status" станет "P", свойство "lastModified" будет иметь значение равное текущей дате,
причем если этого свойства не было, то оно будет добавлено:
db.inventory.updateMany(
   { "qty": { $lt: 50 } },
   {
     $set: { "size.uom": "in", status: "P" },
     $currentDate: { lastModified: true }
   }
)

Заменить один документ в коллекции на другой (нельзя менять свойство "_id" и нельзя использовать операторы):
db.inventory.replaceOne(
   { item: "paper" },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 40 } ] }
)

DELETE:

Удалить все документы в коллекции:
db.inventory.deleteMany({})

Удалить все документы в коллекции, у которых свойство "status" равно "A":
db.inventory.deleteMany({ status : "A" })

Удалить один документ в коллекции, у которого свойство "status" равно "D":
db.inventory.deleteOne( { status: "D" } )